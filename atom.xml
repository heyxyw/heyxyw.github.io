<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhouqiao&#39;s Blog</title>
  <subtitle>人丑就要多读书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://heyxyw.github.io/"/>
  <updated>2016-09-16T10:35:14.426Z</updated>
  <id>https://heyxyw.github.io/</id>
  
  <author>
    <name>Zhou qiao</name>
    <email>hellozhouqiao@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL盲注</title>
    <link href="https://heyxyw.github.io/2016/09/16/SQL%E7%9B%B2%E6%B3%A8/"/>
    <id>https://heyxyw.github.io/2016/09/16/SQL盲注/</id>
    <published>2016-09-16T06:00:26.000Z</published>
    <updated>2016-09-16T10:35:14.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前段时间项目拿去做了一个入网安全测试,结果测出来例如<code>SQL盲注</code>,<code>跨站点脚本攻击(XSS)</code>,<code>跨站点伪造(CSRF)</code> 等一系列问题.<br>今天先对解决<code>SQL盲注</code> 问题做一个小的总结.</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>SQL盲注</code>,相信大家都不会怎么陌生,如果没听说过得话,那么肯定听说过<code>SQL注入</code>.<br><code>SQL盲注</code> 是一种Web 系统的安全漏洞,属于比较严重的那种.<code>SQL注入</code>有很多种方式,<br>而<code>SQL盲注</code>就是<code>SQL注入</code>的其中一种方式.</p>
<p>在安全级别中,<code>SQL盲注</code>是一种威胁程度很高的安全漏洞.<br>用SQL查询语句去猜解表名、字段、数据等信息，使用外部输入来构造SQL 命令的全部或一部分，<br>如果在用户输入中没有对SQL语法充分地除去或引用，那么生成的SQL可绕过安全性检查，<br>或者插入其他用于修改后端数据库的语句，或者执行系统命令。<br>错误的SQL也会被调用，并返回请求响应，攻击者利用这些漏洞进行系统攻击。</p>
<h3 id="注入实例"><a href="#注入实例" class="headerlink" title="注入实例:"></a>注入实例:</h3><pre><code>//请求地址
String getUrl=&quot;xxx.jsp?user=admin&amp;amp;password=1&apos; or &apos;1&apos;=&apos;1 &quot;;

//接收参数
String user=request.getParameter(&quot;user&quot;);
String password=request.getParameter(&quot;password&quot;);

//拼装sql
String checkSql=&quot;select count(*) from user where username=&apos;&quot;+user+&quot;&apos; and password =&apos;&quot;+password+&quot;&apos;&quot;;

获取参数合成后的sql变成了
select count(*) from users where userid=&apos;admin&apos; and passwd=&apos;1&apos; or &apos;1&apos;=&apos;1&apos;

这条SQL将会返回所有的记录数。
</code></pre><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h4><pre><code>//注册驱动
Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
//获取链接对象
Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jdbcdemo&quot;,&quot;root&quot;,&quot;admin&quot;);

//模拟账号
String user=&quot;zhouq&quot;;

//模拟密码
String password=&quot;1&apos; or &apos;1&apos;=&apos;1&quot;;

//拼接 statement 需要执行的 sql
StringBuilder sqlByStatement=new StringBuilder(&quot;select count(*) from user where &quot;);
sqlByStatement.append(&quot; username=&apos;&quot;).append(user).append(&quot;&apos;&quot;);
sqlByStatement.append(&quot; and password=&apos;&quot;).append(password).append(&quot;&apos;&quot;);

//准备 PreparedStatement 执行的预编译 sql
String sqlByPrepareStatement=&quot;select count(*) from user where username=? and password=?&quot;;

Statement statement = conn.createStatement();
ResultSet query = statement.executeQuery(sqlByStatement.toString());

System.out.println(&quot;账户:&quot;+ user);
System.out.println(&quot;密码:&quot;+ password);
System.out.println(&quot;===========华丽的分割线===========&quot;);

if(query.next()){
    long count = query.getLong(1);
    System.out.println(&quot;Statement 查询结果:&quot; + count);
}

PreparedStatement ps = conn.prepareStatement(sqlByPrepareStatement);

//设置第一个参数
ps.setString(1, user);

//设置第二个参数
ps.setString(2, password);
ResultSet resultSet = ps.executeQuery();

if(resultSet.next()){
    long count = resultSet.getLong(1);
    System.out.println(&quot;PrepareStatement 查询结果: &quot; + count);
}

//资源关闭 操作...
//
</code></pre><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果:"></a>输出结果:</h4><pre><code>账户:zhouq
密码:1&apos; or &apos;1&apos;=&apos;1
===========华丽的分割线===========
Statement 查询结果:1
PrepareStatement 查询结果: 0
</code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>SQL注入攻击</code> 是利用设计上的漏洞,在目标服务器上运行SQL语句进行攻击,动态生成SQL语句时没有对用户输入的数据进行验证是SQL注入攻击得逞的主要原因.</p>
<p>对于JDBC而言,<code>SQL注入</code>攻击只对 <code>Statement</code> 有效,对<code>PreparedStatement</code>是无效的,这是因为<code>PreparedStatement</code>不允许在插入时改变查询的逻辑结构.<br>绕过验证,但这种手段只对<code>Statement</code>有效,对<code>PreparedStatement</code>无效.</p>
<ul>
<li><p>尽量使用<code>PreparedStatement</code> 执行sql .<br>例如上面的 SQL 查询语句.<br>在 Statement 中 的sql 语句: <code>select count(*) from user where username=&#39;admin&#39; and passwd=&#39;1&#39; or &#39;1&#39;=&#39;1&#39;</code>.<br>然后 statement.executeQuery(sql) 执行 ,<br>在<code>PreparedStatement</code> 中 的sql 语句: <code>select count(*) from user where username=? and password=?</code> ,然后再对对应的 ? 赋值.<br><code>Statement</code> 是将整个sql 语句作为一个字符串链接到一起执行.<br><code>PreparedStatement</code> 中则 将  <code>1&#39; or &#39;1&#39;=&#39;1</code>  做为一个字符串 赋值给第二个 ? ,作为 “密码” 字段对应的值.这样一来 ,sql 注入就不存在了.</p>
</li>
<li><p>使用 <code>ORM</code> 框架. 如 Mybatis<br>在 <code>Mybatis</code> 框架中. <code>#{xx}</code> ,使用的是<code>PreparedStatement</code> ,会有类型转换.也是比较安全的.<br><code>select count(*) from user where username=#{username} and password=#{password}</code><br>最终编译的sql为:<br><code>select count(*) from user where username=? and password=?</code></p>
</li>
</ul>
<h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><p>以上的这些,只是对最终sql 的处理.如果想彻底的防止<code>SQL盲注</code> 的系统.<br>那么我们还需要对用户发过来的请求进行过滤,其中请求中的参数值很有可能包括一些危险的字符,<br>这些字符就是我们需要去过滤处理的问题了.关于处理危险字符这些问题,又会涉及到 其他的漏洞 比如 <code>XSS</code> ,<code>CSRF</code> 等等.</p>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前段时间项目拿去做了一个入网安全测试,结果测出来例如&lt;code&gt;SQL盲注&lt;/code&gt;,&lt;code&gt;跨站点脚本攻击(XSS)&lt;/code
    
    </summary>
    
    
      <category term="web安全" scheme="https://heyxyw.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="SQL盲注" scheme="https://heyxyw.github.io/tags/SQL%E7%9B%B2%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://heyxyw.github.io/2016/09/16/hello-world/"/>
    <id>https://heyxyw.github.io/2016/09/16/hello-world/</id>
    <published>2016-09-16T05:30:30.649Z</published>
    <updated>2016-09-16T05:30:30.649Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
