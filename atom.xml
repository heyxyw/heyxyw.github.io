<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhouqiao&#39;s Blog</title>
  <subtitle>人丑就要多读书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://heyxyw.github.io/"/>
  <updated>2016-09-16T10:35:14.426Z</updated>
  <id>https://heyxyw.github.io/</id>
  
  <author>
    <name>Zhou qiao</name>
    <email>hellozhouqiao@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL盲注</title>
    <link href="https://heyxyw.github.io/2016/09/16/SQL%E7%9B%B2%E6%B3%A8/"/>
    <id>https://heyxyw.github.io/2016/09/16/SQL盲注/</id>
    <published>2016-09-16T06:00:26.000Z</published>
    <updated>2016-09-16T10:35:14.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前段时间项目拿去做了一个入网安全测试,结果测出来例如<code>SQL盲注</code>,<code>跨站点脚本攻击(XSS)</code>,<code>跨站点伪造(CSRF)</code> 等一系列问题.<br>今天先对解决<code>SQL盲注</code> 问题做一个小的总结.</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>SQL盲注</code>,相信大家都不会怎么陌生,如果没听说过得话,那么肯定听说过<code>SQL注入</code>.<br><code>SQL盲注</code> 是一种Web 系统的安全漏洞,属于比较严重的那种.<code>SQL注入</code>有很多种方式,<br>而<code>SQL盲注</code>就是<code>SQL注入</code>的其中一种方式.</p>
<p>在安全级别中,<code>SQL盲注</code>是一种威胁程度很高的安全漏洞.<br>用SQL查询语句去猜解表名、字段、数据等信息，使用外部输入来构造SQL 命令的全部或一部分，<br>如果在用户输入中没有对SQL语法充分地除去或引用，那么生成的SQL可绕过安全性检查，<br>或者插入其他用于修改后端数据库的语句，或者执行系统命令。<br>错误的SQL也会被调用，并返回请求响应，攻击者利用这些漏洞进行系统攻击。</p>
<h3 id="注入实例"><a href="#注入实例" class="headerlink" title="注入实例:"></a>注入实例:</h3><pre><code>//请求地址
String getUrl=&quot;xxx.jsp?user=admin&amp;amp;password=1&apos; or &apos;1&apos;=&apos;1 &quot;;

//接收参数
String user=request.getParameter(&quot;user&quot;);
String password=request.getParameter(&quot;password&quot;);

//拼装sql
String checkSql=&quot;select count(*) from user where username=&apos;&quot;+user+&quot;&apos; and password =&apos;&quot;+password+&quot;&apos;&quot;;

获取参数合成后的sql变成了
select count(*) from users where userid=&apos;admin&apos; and passwd=&apos;1&apos; or &apos;1&apos;=&apos;1&apos;

这条SQL将会返回所有的记录数。
</code></pre><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h4><pre><code>//注册驱动
Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
//获取链接对象
Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jdbcdemo&quot;,&quot;root&quot;,&quot;admin&quot;);

//模拟账号
String user=&quot;zhouq&quot;;

//模拟密码
String password=&quot;1&apos; or &apos;1&apos;=&apos;1&quot;;

//拼接 statement 需要执行的 sql
StringBuilder sqlByStatement=new StringBuilder(&quot;select count(*) from user where &quot;);
sqlByStatement.append(&quot; username=&apos;&quot;).append(user).append(&quot;&apos;&quot;);
sqlByStatement.append(&quot; and password=&apos;&quot;).append(password).append(&quot;&apos;&quot;);

//准备 PreparedStatement 执行的预编译 sql
String sqlByPrepareStatement=&quot;select count(*) from user where username=? and password=?&quot;;

Statement statement = conn.createStatement();
ResultSet query = statement.executeQuery(sqlByStatement.toString());

System.out.println(&quot;账户:&quot;+ user);
System.out.println(&quot;密码:&quot;+ password);
System.out.println(&quot;===========华丽的分割线===========&quot;);

if(query.next()){
    long count = query.getLong(1);
    System.out.println(&quot;Statement 查询结果:&quot; + count);
}

PreparedStatement ps = conn.prepareStatement(sqlByPrepareStatement);

//设置第一个参数
ps.setString(1, user);

//设置第二个参数
ps.setString(2, password);
ResultSet resultSet = ps.executeQuery();

if(resultSet.next()){
    long count = resultSet.getLong(1);
    System.out.println(&quot;PrepareStatement 查询结果: &quot; + count);
}

//资源关闭 操作...
//
</code></pre><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果:"></a>输出结果:</h4><pre><code>账户:zhouq
密码:1&apos; or &apos;1&apos;=&apos;1
===========华丽的分割线===========
Statement 查询结果:1
PrepareStatement 查询结果: 0
</code></pre><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>SQL注入攻击</code> 是利用设计上的漏洞,在目标服务器上运行SQL语句进行攻击,动态生成SQL语句时没有对用户输入的数据进行验证是SQL注入攻击得逞的主要原因.</p>
<p>对于JDBC而言,<code>SQL注入</code>攻击只对 <code>Statement</code> 有效,对<code>PreparedStatement</code>是无效的,这是因为<code>PreparedStatement</code>不允许在插入时改变查询的逻辑结构.<br>绕过验证,但这种手段只对<code>Statement</code>有效,对<code>PreparedStatement</code>无效.</p>
<ul>
<li><p>尽量使用<code>PreparedStatement</code> 执行sql .<br>例如上面的 SQL 查询语句.<br>在 Statement 中 的sql 语句: <code>select count(*) from user where username=&#39;admin&#39; and passwd=&#39;1&#39; or &#39;1&#39;=&#39;1&#39;</code>.<br>然后 statement.executeQuery(sql) 执行 ,<br>在<code>PreparedStatement</code> 中 的sql 语句: <code>select count(*) from user where username=? and password=?</code> ,然后再对对应的 ? 赋值.<br><code>Statement</code> 是将整个sql 语句作为一个字符串链接到一起执行.<br><code>PreparedStatement</code> 中则 将  <code>1&#39; or &#39;1&#39;=&#39;1</code>  做为一个字符串 赋值给第二个 ? ,作为 “密码” 字段对应的值.这样一来 ,sql 注入就不存在了.</p>
</li>
<li><p>使用 <code>ORM</code> 框架. 如 Mybatis<br>在 <code>Mybatis</code> 框架中. <code>#{xx}</code> ,使用的是<code>PreparedStatement</code> ,会有类型转换.也是比较安全的.<br><code>select count(*) from user where username=#{username} and password=#{password}</code><br>最终编译的sql为:<br><code>select count(*) from user where username=? and password=?</code></p>
</li>
</ul>
<h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><p>以上的这些,只是对最终sql 的处理.如果想彻底的防止<code>SQL盲注</code> 的系统.<br>那么我们还需要对用户发过来的请求进行过滤,其中请求中的参数值很有可能包括一些危险的字符,<br>这些字符就是我们需要去过滤处理的问题了.关于处理危险字符这些问题,又会涉及到 其他的漏洞 比如 <code>XSS</code> ,<code>CSRF</code> 等等.</p>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前段时间项目拿去做了一个入网安全测试,结果测出来例如&lt;code&gt;SQL盲注&lt;/code&gt;,&lt;code&gt;跨站点脚本攻击(XSS)&lt;/code
    
    </summary>
    
    
      <category term="web安全" scheme="https://heyxyw.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="SQL盲注" scheme="https://heyxyw.github.io/tags/SQL%E7%9B%B2%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>XSS 小结</title>
    <link href="https://heyxyw.github.io/2016/09/16/XSS%E6%80%BB%E7%BB%93/"/>
    <id>https://heyxyw.github.io/2016/09/16/XSS总结/</id>
    <published>2016-09-16T06:00:26.000Z</published>
    <updated>2016-09-17T06:50:25.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇文章中写了关于项目中处理<code>SQL盲注</code>的安全漏洞.其中也提到了<code>XSS</code>.这篇文章就来说一下XSS 是怎么来进行攻击的,如何对其进行防御.</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>XSS攻击</code>：跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为<code>XSS</code>。</p>
<p><code>XSS</code>是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。攻击者利用<code>XSS</code>漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p>
<pre><code>`XSS`攻击的危害包括:
1、盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号
2、控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力
3、盗窃企业重要的具有商业价值的资料
4、非法转账
5、强制发送电子邮件
6、网站挂马
7、控制受害者机器向其它网站发起攻击
</code></pre><p>—-摘自百度百科 <a href="http://baike.baidu.com/link?url=291kpLfadWCQiE2-4IBOKDTANH1VdI7RksMQsaKOZKt4bsGo6H2tfxioRxyH9V8BmzAtNQNPHGF_5xB2jFj2Nq" target="_blank" rel="external">XSS攻击</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们首先搭建一个简易的环境来模拟<code>XSS</code> 攻击 ,其中<code>xssTest.jsp</code> 代码如下</p>
<h5 id="模拟XSS攻击实例1"><a href="#模拟XSS攻击实例1" class="headerlink" title="模拟XSS攻击实例1:"></a>模拟XSS攻击实例1:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"utf-8"</span>%&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"xssTestServltet"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"txt"</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    您输入的账户为: $&#123;userName &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>后台处理 <code>xssTestServlter.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/xssTestServltet"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssTestServltet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        <span class="comment">//接受参数</span></div><div class="line">        String userName=request.getParameter(<span class="string">"userName"</span>);</div><div class="line">        <span class="comment">//存储数据到 作用域</span></div><div class="line">        request.setAttribute(<span class="string">"userName"</span>, userName!=<span class="keyword">null</span>?userName:<span class="string">""</span>);</div><div class="line">        <span class="comment">//跳转到原页面.</span></div><div class="line">        request.getRequestDispatcher(<span class="string">"/xssTest.jsp"</span>).forward(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们请求到测试页面</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-1.jpg" alt="图片"></p>
<p>我们尝试输入 qazxc110,得到的结果为:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-2.jpg" alt="这里写图片描述"></p>
<p>此时页面源代码为:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-3.jpg" alt="这里写图片描述"></p>
<p>我们注意到,我们的输入的字符被原封不动的显示在 15行的位置.那么我们试想一下,如果我们在输入框中输入 这样一段代码:<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>,会是什么样子.按照刚才的测试,那么这次源码中在刚才的位置就应该显示<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code> 这串代码相当于在展示的位置插入了一段javaScript 代码,那么就应该执行alert弹出弹窗 并打印 <code>xss</code>.</p>
<p>我们按照刚才的假设,在代码中实验.我们输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code> 这串代码在文本框中,然后提交页面.然后我得到了一下页面:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-4.jpg" alt="这里写图片描述"></p>
<p>这时我们看到浏览器出现了弹窗,说明刚才的那段<code>script</code> 代码执行了.这个时候也就基本说明了,页面存在<code>XSS</code> 漏洞了.<br>此时的页面源码为:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-5.jpg" alt="这里写图片描述"></p>
<p>这是一种非常简单的方式.我们只是在页面上弹窗一个字符串而已,显然是执行了  <code>&lt;script&gt;&lt;/script&gt;</code>中的代码.那么这里面不但可以写弹窗代码,还可以写其他比如让页面跳转到一个指定的地址.如果这个地址的页面是一个跟当前页面相似的钓鱼页面的话,后果不堪设想.</p>
<p>很多网站都有留言模块.我们可以在留言板上插入一段恶意的代码,提交到后台.由于这段代码是保存在服务器上,若管理员并没有去及时发现并删除这段留言的代码,当范文留言列表的时候,留言会被加载出来.当用户访问这个留言的页面时,这段恶意代码就会执行.实例如下:</p>
<h5 id="模拟XSS攻击实例2"><a href="#模拟XSS攻击实例2" class="headerlink" title="模拟XSS攻击实例2:"></a>模拟XSS攻击实例2:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 原页面访问地址.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/xssTestServltet"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssTestServltet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        <span class="comment">//接受参数</span></div><div class="line">        String userName=request.getParameter(<span class="string">"userName"</span>);</div><div class="line">        <span class="comment">//存储数据到 作用域</span></div><div class="line">        request.setAttribute(<span class="string">"userName"</span>, userName!=<span class="keyword">null</span>?userName:<span class="string">""</span>);</div><div class="line"></div><div class="line">        <span class="comment">//模拟存储一个cookie 到 客户端.在xss 攻击链接中获取.</span></div><div class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"xxzx"</span>,<span class="string">"1234"</span>);</div><div class="line">        response.addCookie(cookie);</div><div class="line"></div><div class="line">        <span class="comment">//模拟数据库中存储的留言.</span></div><div class="line">        request.setAttribute(<span class="string">"ly1"</span>, <span class="string">"xxzx"</span>);</div><div class="line">        <span class="comment">//模拟数据库中存储的留言.这里插入了一段 script 代码.去访问src 对应的xss 攻击 链接.</span></div><div class="line">        request.setAttribute(<span class="string">"ly2"</span>, <span class="string">"&lt;script src='http://localhost:8080/XssTestServlet2'&gt;&lt;/script&gt;么么哒"</span>);</div><div class="line">        <span class="comment">//跳转到原页面.</span></div><div class="line">        request.getRequestDispatcher(<span class="string">"/xssTest.jsp"</span>).forward(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 模拟留言中 xss 攻击的 地址.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/XssTestServlet2"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssTestServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"访问了攻击地址......."</span>);</div><div class="line"></div><div class="line">        <span class="comment">//得到cookies</span></div><div class="line">        Cookie[] cookies = request.getCookies();</div><div class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</div><div class="line">            System.out.println(<span class="string">"name:"</span>+cookie.getName());</div><div class="line">            System.out.println(<span class="string">"value:"</span>+cookie.getValue());</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时我们任意用户在浏览器中访问 留言页面时,页面的代码:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-6.jpg" alt="这里写图片描述"></p>
<p>在<code>留言2</code> 的后面,还去加载了一个 我们之前定义好的<code>XSS</code> 链接 .这样一来我们除了请求正常的地址,页面还另外请求了攻击的地址:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-7.jpg" alt="这里写图片描述"></p>
<p>而在我们XSS 攻击地址的后台.我们获取到了这些信息:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-8.jpg" alt="这里写图片描述"></p>
<p>当管理员进入后台来浏览留言时,就会触发,然后管理员的cookie 后后台地址 等等一系列信息都可以被拿到,然后攻击者就可以用一些cookie欺诈工具来更改管理员的cookie ,就可以不用输入账号,密码 也可以以管理员的身份登录进系统.</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为解决上面出现的问题,现提供两种解决方案.</p>
<h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>我们使用一个第三方的jar 包.调用第三方的api 来防止 XSS 攻击带来的危险.具体步骤如下:</p>
<p>首先,添加 apache 的commons-lang-2.6.jar .</p>
<p>然后,在后台调用 <code>StringEscapeUtils.escapeHtml(string);</code> <code>StringEscapeUtils.escapeJavaScript(string);</code> <code>StringEscapeUtils.escapeSql(string);</code> 对请求过来的参数进行转义,若还需要这些值到前台.我们可以使用；<code>StringEscapeUtils.unescapeXXX(String)</code>;(<code>XXX</code> 可以表示 <code>Html</code>,<code>JavaScript</code>,<code>Sql</code>,<code>Xml</code> 等) 来进行反转义,或者在前台使用js 调用escape 可是可以的.</p>
<p>后台处理action:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/stringEscapeUtils"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringEscapeUtils</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</div><div class="line">    String  str=request.getParameter(<span class="string">"username"</span>);</div><div class="line">    System.out.println(<span class="string">"username:   "</span>+str);</div><div class="line">    System.out.println(<span class="string">"escapeSql:   "</span>+StringEscapeUtils.escapeSql(str));</div><div class="line">    System.out.println(<span class="string">"escapeHtml:   "</span>+StringEscapeUtils.escapeHtml(str));</div><div class="line">    System.out.println(<span class="string">"escapeJavaScript:   "</span>+StringEscapeUtils.escapeJavaScript(str));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们前台输入:<code>&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;</code> 时,后台的输出结果为:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-9.jpg" alt="这里写图片描述"></p>
<p>注意:<code>commons-lang-3.x</code> 里面已经没有 <code>escapeSql</code> <code>escapeJavaScript</code> 方法,取而代之的是 <code>escapeEcmaScript</code> .具体的使用方法,就请自行验证了.</p>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>这里我们重点说一下方案二.这也是我们解决<code>XSS</code> 攻击时采用的一种方式.</p>
<p>前面我们说到 <code>XSS</code> 攻击无非就是我们对于参数的过滤没有做好.导致一些不安全的字符被原封不动的进入到我们的业务中.那么最终就是对参数进行过滤.在这种方案中.我们需要自己写一个<code>Filter</code>,使用<code>Filter</code> 来过滤发出的请求.对于每个post 的请求的参数过滤一些关键字,把他们替换成安全的.例如：&lt; &gt; ‘ “ \ / # &amp;,方法是实现一个自定义的 <code>HttpServletRequestWrapper</code> ,然后在<code>Filter</code> 里面调用它替换<code>getParameter</code> 方法即可,具体步骤如下.</p>
<p>首先 我们在后台添加一个 <code>XssHttpServletRequestWrapper</code> 类,让它继承 <code>javax.servlet.http.HttpServletRequestWrapper</code> ,代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhouq.filter.Xss;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="comment">/** 对请求 的参数 进行 Xss 安全过滤 </span></div><div class="line"> * <span class="doctag">@author</span> zhouq</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 替换 getParameterValues </div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String[] getParameterValues(String parameter) &#123;</div><div class="line">        String[] values = <span class="keyword">super</span>.getParameterValues(parameter);</div><div class="line">        <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> count = values.length;</div><div class="line">        String[] eccodedValues = <span class="keyword">new</span> String[count];</div><div class="line"></div><div class="line">        <span class="comment">// 对每个参数值进行 XSS 清理</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            </div><div class="line">            eccodedValues[i] = cleanXSS(values[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> eccodedValues;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 替换 getParameter </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String parameter)</span></span>&#123;</div><div class="line">        String value=<span class="keyword">super</span>.getParameter(parameter);</div><div class="line">        <span class="keyword">if</span>(value!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//对参数值进行 XSS 清理</span></div><div class="line">            value=cleanXSS(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        String value = <span class="keyword">super</span>.getHeader(name);</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> cleanXSS(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** XSS 清理</span></div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">cleanXSS</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"清理前  :"</span>+value);</div><div class="line">        value = value.replaceAll(<span class="string">"&lt;"</span>, <span class="string">"&amp; lt;"</span>).replaceAll(<span class="string">"&gt;"</span>, <span class="string">"&amp; gt;"</span>);</div><div class="line">        value = value.replaceAll(<span class="string">"\\("</span>, <span class="string">"&amp; #40;"</span>).replaceAll(<span class="string">"\\)"</span>, <span class="string">"&amp; #41;"</span>);</div><div class="line">        value = value.replaceAll(<span class="string">"'"</span>, <span class="string">"&amp; #39;"</span>);</div><div class="line">        value = value.replaceAll(<span class="string">"eval\\((.*)\\)"</span>, <span class="string">""</span>);</div><div class="line">        value = value.replaceAll(<span class="string">"[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']"</span>, <span class="string">"\"\""</span>);</div><div class="line">        value = value.replaceAll(<span class="string">"script"</span>, <span class="string">""</span>);</div><div class="line">        System.out.println(<span class="string">"清理后  :"</span>+value);</div><div class="line">        System.out.println(<span class="string">"----------------------------------------------------------"</span>);</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们还需要在后台添加一个过滤器 <code>XssFilter</code> ,让它实现 <code>javax.servlet.Filter</code>,具体代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhouq.filter.Xss;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">    FilterConfig config = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.config = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        <span class="comment">//执行 我们自己定义的 XssHttpServletRequestWrapper</span></div><div class="line">        chain.doFilter(<span class="keyword">new</span> XssHttpServletRequestWrapper((HttpServletRequest) request), response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.config = config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后,我们还需要在web.xml 中应用 这个过滤器.web.xml 中的配置如下:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置自实现的 XSS 过滤器 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zhouq.filter.Xss.XssFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>XssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>到这里.我们的 <code>XSS</code> 清理就编写完成了.每一次请求中的危险字符,敏感信息都会被过滤掉,您可以去测试一下是否对您的应用生效.当然了,如果您要处理更多的字符,那么您可以继续在 <code>cleanXSS</code> 中去添加你需要处理的东西.当然,需要注意的是,一些必要的字符不能被过滤,否则就改变了用户的真实数据.比如在我们当前系统中在为菜单添加操作的时候 会有前缀为<code>javascript</code> 的代码.那么这里就会被过滤掉.如果你应用中也出现这种情况,那么就得请您自己做取舍了.</p>
<p>假设登录页面有个输入用户名和密码的输入框，可以有很多 <code>XSS</code>  <code>CSRF 注入钓鱼网站</code>  <code>SQL</code>注入等的攻击手段，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">输入用户名 : &gt;"'&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(1779)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">输入用户名: usera&gt;"'&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"javascript:alert(23664)"</span>&gt;</span>  </div><div class="line">输入用户名: "'&gt;<span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">"/WF_XSRF.html--end_hig--begin_highlight_tag--hlight_tag--"</span>&gt;</span>  </div><div class="line">输入用户名: usera'"&gt;<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://demo.testfire.net--en--begin_highlight_tag--d_highlight_tag--"</span>&gt;</span>  </div><div class="line">  </div><div class="line">密码随意输入。</div></pre></td></tr></table></figure></p>
<p>下面提供了一个登录页面的攻击实例，你可以通过下面的方式进行简单的测试:</p>
<pre><code>用户名: `1&apos; or &apos;1&apos;=&apos;1` 

密码:`&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;` 
</code></pre><p>测试结果:</p>
<p><img src="http://odl62d8rn.bkt.clouddn.com/xss-10.jpg" alt="这里写图片描述"></p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>到这里，<code>XSS</code> 攻击的防御措施就写完了，使用 <code>Filter</code> 的这种方式，不仅仅可以防御 <code>XSS</code> 攻击，还可以防御 <code>CSRF</code> 攻击，<code>SQL注入</code> 等安全问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇文章中写了关于项目中处理&lt;code&gt;SQL盲注&lt;/code&gt;的安全漏洞.其中也提到了&lt;code&gt;XSS&lt;/code&gt;.这篇文章就来说一
    
    </summary>
    
    
      <category term="web安全" scheme="https://heyxyw.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="XSS" scheme="https://heyxyw.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://heyxyw.github.io/2016/09/16/hello-world/"/>
    <id>https://heyxyw.github.io/2016/09/16/hello-world/</id>
    <published>2016-09-16T05:30:30.649Z</published>
    <updated>2016-09-16T05:30:30.649Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
